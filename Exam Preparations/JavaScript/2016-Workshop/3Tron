using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

class Program
{
    static void Main(string[] args)
    {

        var input = Console.ReadLine();
        var cubeDimentions = input
                .Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse)
                .ToArray();
        var x = cubeDimentions[0];
        var y = cubeDimentions[1];
        var z = cubeDimentions[2];

        var rows = x + 1;
        var cols = 2 * (y + z);

        var visited = new bool[rows, cols];
        var redCommands = Console.ReadLine();
        var blueCommands = Console.ReadLine();

        var redStartRow = x / 2;
        var redStartCol = y / 2;

        var redRow = redStartRow;
        var redCol = redStartCol;

        var redDirection = 0;
        var hasRedCrashed = false;
        var redCommandIndex = 0;

        var blueRow = x / 2;
        var blueCol = (y + z) + (y / 2);

        var blueDirection = 2;

        var hasBlueCrashed = false;
        var blueCommandIndex = 0;


        /*directions
       0 => right
       1 => down
       2 => left
       3 => up */
        int[] deltaRows = { 0, 1, 0, -1 };
        int[] deltaCols = { 1, 0, -1, 0 };

        visited[redRow, redCol] = true;
        visited[blueRow, blueCol] = true;

        while (!hasRedCrashed &&
       !hasBlueCrashed &&
       redCommandIndex < redCommands.Length
       && blueCommandIndex < blueCommands.Length)
        {
            char redComand = redCommands[redCommandIndex];
            while (redComand != 'M')
            {
                redDirection = ChangeDir(redDirection, redComand);
                ++redCommandIndex;
                redComand = redCommands[redCommandIndex];
            }

            char blueCommand = blueCommands[blueCommandIndex];
            while (blueCommand != 'M')
            {
                blueDirection = ChangeDir(blueDirection, blueCommand);
                ++blueCommandIndex;
                blueCommand = blueCommands[blueCommandIndex];
            }

            var nextRedRow = redRow + deltaRows[redDirection];
            var nextRedCol = redCol + deltaCols[redDirection];
            nextRedCol = (nextRedCol + cols) % cols;
            ++redCommandIndex;

            var nextBlueRow = blueRow + deltaRows[blueDirection];
            var nextBlueCol = blueCol + deltaCols[blueDirection];
            nextBlueCol = (nextBlueCol + cols) % cols;
            ++blueCommandIndex;

            if (nextRedRow < 0 || nextRedRow >= rows)
            {
                hasRedCrashed = true;
            }
            else if (visited[nextRedRow, nextRedCol])
            {
                hasRedCrashed = true;
                redRow = nextRedRow;
                redCol = nextRedCol;
            }

            if (nextBlueRow < 0 || nextBlueRow >= rows)
            {
                hasBlueCrashed = true;
                //    if (!hasRedCrashed)
                // {
                redRow = nextRedRow;
                redCol = nextRedCol;
                //  }
            }

            if (visited[nextBlueRow, nextBlueCol])
            {
                hasBlueCrashed = true;
                redRow = nextRedRow;
                redCol = nextRedCol;

            }


            if (nextRedRow == nextBlueRow && nextRedCol == nextBlueCol)
            {
                hasBlueCrashed = true;
                hasRedCrashed = true;
                //  if (!visited[nextRedRow, nextRedCol])
                //  {
                redRow = nextRedRow;
                redCol = nextRedCol;
                // }
            }

            if (hasRedCrashed || hasBlueCrashed)
            {
                // Console.WriteLine("sdfghjkl;");
            }
            else
            {

                // Console.WriteLine("vsichki sa jivi");
                visited[nextRedRow, nextRedCol] = true;
                //  visited[nextBlueRow, nextBlueCol] = true;

                redRow = nextRedRow;
                redCol = nextRedCol;
                blueRow = nextBlueRow;
                blueCol = nextBlueCol;
            }
        }

        if (hasRedCrashed && hasBlueCrashed)
        {
            Console.WriteLine("DRAW");
        }
        //else if (!hasRedCrashed &&
        //    !hasBlueCrashed &&
        //    redCommandIndex == redCommands.Length - 1 &&
        //    blueCommandIndex == blueCommands.Length - 1)
        //{
        //    Console.WriteLine("DRAW");
        //}
        else if (hasRedCrashed)
        {
            Console.WriteLine("BLUE");
        }
        else if (hasBlueCrashed)
        {
            Console.WriteLine("RED");
        }

        var distance = Math.Abs((redStartRow - redRow)) +
           Math.Abs(redStartCol - redCol);
        Console.WriteLine(distance);

        PrintMatrix(visited);

    }

    private static int ChangeDir(int direction, char command)
    {
        if (command == 'L')
        {
            --direction;
        }
        else
        {
            ++direction;
        }

        return (direction + 4) % 4;
    }

    private static void PrintMatrix(bool[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                Console.Write("{0} ", (matrix[i, j]) ? 1 : 0);
            }
            Console.WriteLine();
        }
    }
}
