

 public static class Validator
    {
        public static void CheckIfNull(object obj, string message = null)
        {
            if (obj == null)
            {
                throw new NullReferenceException(message);
            }
        }
        public static void CheckStringIfNullorEmpty(string text, string message = null)
        {
            if (string.IsNullOrEmpty(text))
            {
                throw new NullReferenceException(message);
            }
        }
    }

Console.OutputEncoding = Encoding.UTF8;

using System.Globalization;
using System.Threading;
…
Thread.CurrentThread.CurrentCulture =
  CultureInfo.InvariantCulture;
  
int a = int.Parse(Console.ReadLine());
double b = double.Parse(Console.ReadLine());

---------------------------------------
 StreamReader reader = new StreamReader("..\\..\\Test.txt"); 2 directories up. .EXE is always in bin debug
            Console.SetIn(reader);
-------------------------------------------------------------------------
Formating Output
{index[,alignment][:formatString]}
-number => left alignment
+number => right alignment

 var temp = Environment.CurrentDirectory;
            for (int i = 0; i < 2; i++)
            {
                var length = temp.LastIndexOf("\\");
                temp = temp.Substring(0, length);
            }



Forum
    [курс] Домашно TOPIC - N задача

    Например: [C#] Домашно Conditional Statements - 1 задача
			 

var matrix = new byte[n, n];
            for (int row = 0; row < n; row++)
            {
                var currentrow = Console.ReadLine().Split(' ');

                for (int col = 0; col < n; col++)
                {
                    matrix[row, col] = byte.Parse( currentrow[col]);
                }
            }
		 
		 
int[] arr = input.Split(new char[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse)
                .ToArray();
		 
int length = int.Parse(Console.ReadLine());
        int[] arr = new int[length];

        for (int i = 0; i < length; i++)
        {
            arr[i] = int.Parse(Console.ReadLine());
        }
#PRINT MATRIX	
		 private static void PrintMatrix(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                Console.Write("{0} ", matrix[i, j]);
            }
            Console.WriteLine();
        }
    }
# Fill Matrix
// same numbers lelt-to-right diagonal
    private static int[,] FillTheField(int rows, int cols)
    {
        var field = new int[rows, cols];
        var temp = 3;
        var size = rows - 2;

        for (int k = 0; k < cols + rows; k++)
        {
            for (int row = 0; row < rows; row++)
            {
                for (int col = 0; col < cols; col++)
                {
                    if ((row - col) == (size - k))
                    {
                        field[row, col] = temp;
                    }
                }
            }
            temp += 3;
        }

        return field;
    }
---------------------------------------------------
		int number= Console.ReadLine();
        string binary = new string('1', number);
		Console.WriteLine(b);
        Console.WriteLine(Convert.ToInt32(binary,2));
------------------------------------------------------------------		
		
		int.Parse(Console.ReadLine());
}
		
---------------------------------------	
	public static int ResetBit(int number, int position)
    {
        number = ~(1 << position) & number;
        return number;
    }

------------------------------
public static int GetBits(int number, int position, int length)
    {
        var binaryNumber = new string('1', length);
        int mask = Convert.ToInt32(binaryNumber, 2);
        int numberAndMask = (mask << position) & number;
        int bitsNumber = numberAndMask >> position;
        return bitsNumber;
    }
===========================================================
public static int ResetBits(int number, int position, int length)
    {
        var binaryNumber = new string('1', length);
        int mask = Convert.ToInt32(binaryNumber, 2);
        int numberAndMask = ~(mask << position) & number;
        int bitsNumber = numberAndMask;
        return bitsNumber;
    }
================================================================
		### Swap n bits
		====================================
using System;
		
class Program
{
    static void Main(string[] args)
    {
        uint number = uint.Parse(Console.ReadLine());
        uint mask1 = (uint)7 << 3;
        uint mask2 = (uint)7 << 24;
        uint nunmberAndMask1 = (number & mask1) >> 3;
        uint numberAndMask2 = (number & mask2) >> 24;
        number = number & ~nunmberAndMask1;
        number = number & ~numberAndMask2;

        number = number | (nunmberAndMask1 << 24);
        number = number | (numberAndMask2 << 3);

        Console.WriteLine(number);
    }
}
=============================================================
using System;

public class ModifyBit
{
    public static void Main()
    {
        ulong numberN = ulong.Parse(Console.ReadLine());
        int positionP = int.Parse(Console.ReadLine());
        byte bitValueV = byte.Parse(Console.ReadLine());
        ulong mask = 1;
        ulong numberAndMask;

        if (bitValueV == 0)
        {
            numberAndMask = ~(mask << positionP) & numberN;
        }
        else  // bitValueV ==1
        {
            numberAndMask = numberN | mask << positionP; 
        }

        Console.WriteLine(numberAndMask);
    }
}

			
	------------------------		
